CREATE TABLE WORKER
(
    ID        NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    NAME      VARCHAR(20),
    BIRTHDATE DATE
);

CREATE TYPE WORKER_TYPE AS OBJECT
(
    ID        NUMBER,
    NAME      VARCHAR(20),
    BIRTHDATE DATE
);

CREATE TABLE STORE
(
    ID    NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    TITLE VARCHAR(20)
);

CREATE TYPE STORE_TYPE AS OBJECT
(
    ID    NUMBER,
    TITLE VARCHAR(20)
);

CREATE TABLE PRODUCT
(
    ID       NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    PRICE    NUMBER,
    STORE_ID NUMBER,
    CONSTRAINT PRODUCT_STORE_FK FOREIGN KEY (STORE_ID) REFERENCES STORE (ID) ON DELETE CASCADE
);

CREATE TYPE PRODUCT_TYPE AS OBJECT
(
    ID       NUMBER,
    PRICE    NUMBER,
    STORE_ID NUMBER
);

CREATE TABLE LOGS
(
    ID         NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    OPERATION  VARCHAR2(10) NOT NULL,
    TABLE_NAME VARCHAR2(20) NOT NULL,
    CREATED_AT TIMESTAMP    NOT NULL,
    NEW        ANYDATA,
    OLD        ANYDATA
);

CREATE OR REPLACE TRIGGER WORKER_LOG_TRIGGER
    BEFORE INSERT OR UPDATE OR DELETE
    ON WORKER
    FOR EACH ROW
DECLARE
BEGIN
    CASE
        WHEN INSERTING
            THEN INSERT INTO LOGS (OPERATION,
                                   CREATED_AT,
                                   TABLE_NAME,
                                   NEW,
                                   OLD)
                 VALUES ('INSERT', SYSTIMESTAMP, 'WORKER',
                         ANYDATA.CONVERTOBJECT(WORKER_TYPE(:NEW.ID, :NEW.NAME, :NEW.BIRTHDATE)), NULL);
        WHEN DELETING
            THEN INSERT INTO LOGS (OPERATION,
                                   CREATED_AT,
                                   TABLE_NAME,
                                   NEW,
                                   OLD)
                 VALUES ('DELETE', SYSTIMESTAMP, 'WORKER', NULL,
                         ANYDATA.CONVERTOBJECT(WORKER_TYPE(:OLD.ID, :OLD.NAME, :OLD.BIRTHDATE)));
        WHEN UPDATING
            THEN INSERT INTO LOGS (OPERATION,
                                   CREATED_AT,
                                   TABLE_NAME,
                                   NEW,
                                   OLD)
                 VALUES ('UPDATE', SYSTIMESTAMP, 'WORKER',
                         ANYDATA.CONVERTOBJECT(WORKER_TYPE(:NEW.ID, :NEW.NAME, :NEW.BIRTHDATE)),
                         ANYDATA.CONVERTOBJECT(WORKER_TYPE(:OLD.ID, :OLD.NAME, :OLD.BIRTHDATE)));
        END CASE;
END;

CREATE OR REPLACE TRIGGER PRODUCT_LOG_TRIGGER
    BEFORE INSERT OR UPDATE OR DELETE
    ON PRODUCT
    FOR EACH ROW
DECLARE
BEGIN
    CASE
        WHEN INSERTING
            THEN INSERT INTO LOGS (OPERATION,
                                   CREATED_AT,
                                   TABLE_NAME,
                                   NEW,
                                   OLD)
                 VALUES ('INSERT', SYSTIMESTAMP, 'PRODUCT',
                         ANYDATA.CONVERTOBJECT(PRODUCT_TYPE(:NEW.ID, :NEW.PRICE, :NEW.STORE_ID)), NULL);
        WHEN DELETING
            THEN INSERT INTO LOGS (OPERATION,
                                   CREATED_AT,
                                   TABLE_NAME,
                                   NEW,
                                   OLD)
                 VALUES ('DELETE', SYSTIMESTAMP, 'PRODUCT', NULL,
                         ANYDATA.CONVERTOBJECT(PRODUCT_TYPE(:OLD.ID, :OLD.PRICE, :OLD.STORE_ID)));
        WHEN UPDATING
            THEN INSERT INTO LOGS (OPERATION,
                                   CREATED_AT,
                                   TABLE_NAME,
                                   NEW,
                                   OLD)
                 VALUES ('UPDATE', SYSTIMESTAMP, 'PRODUCT',
                         ANYDATA.CONVERTOBJECT(PRODUCT_TYPE(:NEW.ID, :NEW.PRICE, :NEW.STORE_ID)),
                         ANYDATA.CONVERTOBJECT(PRODUCT_TYPE(:OLD.ID, :OLD.PRICE, :OLD.STORE_ID)));
        END CASE;
END;

CREATE OR REPLACE TRIGGER STORE_LOG_TRIGGER
    BEFORE INSERT OR UPDATE OR DELETE
    ON STORE
    FOR EACH ROW
DECLARE
BEGIN
    CASE
        WHEN INSERTING
            THEN INSERT INTO LOGS (OPERATION,
                                   CREATED_AT,
                                   TABLE_NAME,
                                   NEW,
                                   OLD)
                 VALUES ('INSERT', SYSTIMESTAMP, 'STORE',
                         ANYDATA.CONVERTOBJECT(STORE_TYPE(:NEW.ID, :NEW.TITLE)), NULL);
        WHEN DELETING
            THEN INSERT INTO LOGS (OPERATION,
                                   CREATED_AT,
                                   TABLE_NAME,
                                   NEW,
                                   OLD)
                 VALUES ('DELETE', SYSTIMESTAMP, 'STORE', NULL,
                         ANYDATA.CONVERTOBJECT(STORE_TYPE(:OLD.ID, :OLD.TITLE)));
        WHEN UPDATING
            THEN INSERT INTO LOGS (OPERATION,
                                   CREATED_AT,
                                   TABLE_NAME,
                                   NEW,
                                   OLD)
                 VALUES ('UPDATE', SYSTIMESTAMP, 'STORE',
                         ANYDATA.CONVERTOBJECT(STORE_TYPE(:NEW.ID, :NEW.TITLE)),
                         ANYDATA.CONVERTOBJECT(STORE_TYPE(:OLD.ID, :OLD.TITLE)));
        END CASE;
END;


-- procedure overload

CREATE OR REPLACE PACKAGE INFO IS
    PROCEDURE RESTORE(TIME_OFFSET INTERVAL DAY TO SECOND);
    PROCEDURE RESTORE_DATE(DATE_TO_RESTORE DATE);
    PROCEDURE RESTORE(DATE_TO_RESTORE DATE);
    PROCEDURE RESTORE_TS(TS TIMESTAMP);
END;

CREATE OR REPLACE PACKAGE BODY INFO IS
    PROCEDURE RESTORE_DATE(DATE_TO_RESTORE DATE) IS
    BEGIN
        INFO.RESTORE_TS(TO_TIMESTAMP(DATE_TO_RESTORE));
    END;

    PROCEDURE RESTORE_STORE_ACTION(ACTION LOGS%ROWTYPE) IS
        NEW_STORE_OBJ STORE_TYPE;
        OLD_STORE_OBJ STORE_TYPE;
        INVALID_OBJ EXCEPTION;
    BEGIN
        IF ACTION.OPERATION = 'INSERT' THEN
            IF ACTION.NEW.GETOBJECT(NEW_STORE_OBJ) != DBMS_TYPES.SUCCESS THEN
                RAISE INVALID_OBJ;
            END IF;
            INSERT INTO STORE (ID, TITLE)
            VALUES (NEW_STORE_OBJ.ID, NEW_STORE_OBJ.TITLE);
        END IF;
        IF ACTION.OPERATION = 'UPDATE' THEN
            IF ACTION.OLD.GETOBJECT(OLD_STORE_OBJ) != DBMS_TYPES.SUCCESS THEN
                RAISE INVALID_OBJ;
            END IF;
            IF ACTION.NEW.GETOBJECT(NEW_STORE_OBJ) != DBMS_TYPES.SUCCESS THEN
                RAISE INVALID_OBJ;
            END IF;
            UPDATE STORE
            SET ID    = NEW_STORE_OBJ.ID,
                TITLE = NEW_STORE_OBJ.TITLE
            WHERE ID = OLD_STORE_OBJ.ID;
        END IF;
        IF ACTION.OPERATION = 'DELETE' THEN
            IF ACTION.OLD.GETOBJECT(OLD_STORE_OBJ) != DBMS_TYPES.SUCCESS THEN
                RAISE INVALID_OBJ;
            END IF;
            DELETE
            FROM STORE
            WHERE ID = OLD_STORE_OBJ.ID;
        END IF;
    END;
    PROCEDURE RESTORE_PRODUCT_ACTION(ACTION LOGS%ROWTYPE) IS
        NEW_PRODUCT_OBJ PRODUCT_TYPE;
        OLD_PRODUCT_OBJ PRODUCT_TYPE;
        INVALID_OBJ EXCEPTION;
    BEGIN
        IF ACTION.OPERATION = 'INSERT' THEN
            IF ACTION.NEW.GETOBJECT(NEW_PRODUCT_OBJ) != DBMS_TYPES.SUCCESS THEN
                RAISE INVALID_OBJ;
            END IF;
            INSERT INTO PRODUCT (ID, STORE_ID, PRICE)
            VALUES (NEW_PRODUCT_OBJ.ID, NEW_PRODUCT_OBJ.STORE_ID, NEW_PRODUCT_OBJ.PRICE);
        END IF;
        IF ACTION.OPERATION = 'UPDATE' THEN
            IF ACTION.OLD.GETOBJECT(OLD_PRODUCT_OBJ) != DBMS_TYPES.SUCCESS THEN
                RAISE INVALID_OBJ;
            END IF;
            IF ACTION.NEW.GETOBJECT(NEW_PRODUCT_OBJ) != DBMS_TYPES.SUCCESS THEN
                RAISE INVALID_OBJ;
            END IF;
            UPDATE PRODUCT
            SET ID       = NEW_PRODUCT_OBJ.ID,
                STORE_ID = NEW_PRODUCT_OBJ.STORE_ID,
                PRICE    = NEW_PRODUCT_OBJ.PRICE
            WHERE ID = OLD_PRODUCT_OBJ.ID;
        END IF;
        IF ACTION.OPERATION = 'DELETE' THEN
            IF ACTION.OLD.GETOBJECT(OLD_PRODUCT_OBJ) != DBMS_TYPES.SUCCESS THEN
                RAISE INVALID_OBJ;
            END IF;
            DELETE
            FROM PRODUCT
            WHERE ID = OLD_PRODUCT_OBJ.ID;
        END IF;
    END;
    PROCEDURE RESTORE_WORKER_ACTION(ACTION LOGS%ROWTYPE) IS
        NEW_WORKER_OBJ WORKER_TYPE;
        OLD_WORKER_OBJ WORKER_TYPE;
        INVALID_OBJ EXCEPTION;
    BEGIN
        IF ACTION.OPERATION = 'INSERT' THEN
            IF ACTION.NEW.GETOBJECT(NEW_WORKER_OBJ) != DBMS_TYPES.SUCCESS THEN
                RAISE INVALID_OBJ;
            END IF;
            INSERT INTO WORKER (ID, NAME, BIRTHDATE)
            VALUES (NEW_WORKER_OBJ.ID, NEW_WORKER_OBJ.NAME, NEW_WORKER_OBJ.BIRTHDATE);
        END IF;
        IF ACTION.OPERATION = 'UPDATE' THEN
            IF ACTION.OLD.GETOBJECT(NEW_WORKER_OBJ) != DBMS_TYPES.SUCCESS THEN
                RAISE INVALID_OBJ;
            END IF;
            IF ACTION.NEW.GETOBJECT(OLD_WORKER_OBJ) != DBMS_TYPES.SUCCESS THEN
                RAISE INVALID_OBJ;
            END IF;
            UPDATE WORKER
            SET ID        = NEW_WORKER_OBJ.ID,
                BIRTHDATE = NEW_WORKER_OBJ.BIRTHDATE,
                NAME      = NEW_WORKER_OBJ.NAME
            WHERE ID = OLD_WORKER_OBJ.ID;
        END IF;
        IF ACTION.OPERATION = 'DELETE' THEN
            IF ACTION.OLD.GETOBJECT(OLD_WORKER_OBJ) != DBMS_TYPES.SUCCESS THEN
                RAISE INVALID_OBJ;
            END IF;
            DELETE
            FROM WORKER
            WHERE ID = OLD_WORKER_OBJ.ID;
        END IF;
    END;

    PROCEDURE RESTORE_TS(TS TIMESTAMP) IS
        LAST_LOG_ID NUMBER;
    BEGIN
        EXECUTE IMMEDIATE 'TRUNCATE TABLE WORKER';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE PRODUCT';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE STORE';
        SELECT MAX(ID) INTO LAST_LOG_ID FROM LOGS;

        FOR ACTION IN (SELECT *
                       FROM LOGS
                       WHERE CREATED_AT <= TS
                       ORDER BY CREATED_AT)
            LOOP
                CASE ACTION.TABLE_NAME
                    WHEN 'WORKER'
                        THEN INFO.RESTORE_WORKER_ACTION(ACTION);
                    WHEN 'PRODUCT'
                        THEN INFO.RESTORE_PRODUCT_ACTION(ACTION);
                    WHEN 'STORE'
                        THEN INFO.RESTORE_STORE_ACTION(ACTION);
                    END CASE;
            END LOOP;
        DELETE
        FROM LOGS
        WHERE ID > LAST_LOG_ID;
    END;
    PROCEDURE RESTORE(TIME_OFFSET INTERVAL DAY TO SECOND) IS
        TS TIMESTAMP;
    BEGIN
        TS := SYSTIMESTAMP - TIME_OFFSET;
        INFO.RESTORE_TS(TS);
    END;
    PROCEDURE RESTORE(DATE_TO_RESTORE DATE) IS
    BEGIN
        INFO.RESTORE_TS(TO_TIMESTAMP(DATE_TO_RESTORE));
    END;
END;

CALL INFO.RESTORE(TO_DATE('2003/12/31', 'yyyy/mm/dd'));
CALL INFO.RESTORE(INTERVAL '800' SECOND);

CREATE OR REPLACE DIRECTORY LAB_DIR AS '/opt/oracle/userhome/oracle/lab5';

CREATE OR REPLACE FUNCTION OBJ_TO_STRING(DATA ANYDATA, TABLE_NAME VARCHAR2) RETURN VARCHAR2 IS
    WORKER_OBJ  WORKER_TYPE;
    STORE_OBJ   STORE_TYPE;
    PRODUCT_OBJ PRODUCT_TYPE;
BEGIN
    IF DATA IS NULL THEN
        RETURN 'NON-EXISTING';
    END IF;

    IF TABLE_NAME = 'WORKER' AND DATA.GETOBJECT(WORKER_OBJ) = DBMS_TYPES.SUCCESS THEN
        RETURN 'ID: ' || WORKER_OBJ.ID || ', NAME: ' || WORKER_OBJ.NAME || ', BIRTHDATE: ' || WORKER_OBJ.BIRTHDATE;
    ELSIF TABLE_NAME = 'STORE' AND DATA.GETOBJECT(STORE_OBJ) = DBMS_TYPES.SUCCESS THEN
        RETURN 'ID: ' || STORE_OBJ.ID || ', TITLE: ' || STORE_OBJ.TITLE;
    ELSIF TABLE_NAME = 'PRODUCT' AND DATA.GETOBJECT(PRODUCT_OBJ) = DBMS_TYPES.SUCCESS THEN
        RETURN 'ID: ' || PRODUCT_OBJ.ID || ', STORE_ID: ' || PRODUCT_OBJ.STORE_ID || ', PRICE: ' || PRODUCT_OBJ.PRICE;
    END IF;

    RETURN 'UNKNOWN';
END;

CREATE OR REPLACE PACKAGE REPORTS AS
    PROCEDURE GET_REPORT;
    PROCEDURE GET_REPORT(TS TIMESTAMP);
END;

CREATE OR REPLACE PACKAGE BODY REPORTS AS
    LAST_REPORT_DATE TIMESTAMP := SYSTIMESTAMP;

    PROCEDURE GET_REPORT IS
    BEGIN
        GET_REPORT(LAST_REPORT_DATE);
    END;

    PROCEDURE GET_REPORT(TS TIMESTAMP) IS
        L_CLOB     CLOB;
        FILE_ID    UTL_FILE.FILE_TYPE;
        LOGS_COUNT NUMBER;
    BEGIN
        SELECT COUNT(*) INTO LOGS_COUNT FROM LOGS WHERE LOGS.CREATED_AT > TS;
        IF LOGS_COUNT = 0 THEN
            L_CLOB := '<html><body>No logs since ' || LAST_REPORT_DATE || '</body></html>';
        ELSE
            L_CLOB := '
        <html>
        <style>table, th, td {
              border: 1px solid;
            }</style>
            <body>
            <h1> Operation list since ' || LAST_REPORT_DATE || '</h1>';


            L_CLOB := L_CLOB || '
            <table>
            <tr align="center">
                <th>OPERATION</th>
                <th>TABLE NAME</th>
                <th>LOG DATE</th>
                <th>OLD</th>
                <th>NEW</th>
            </tr>' || CHR(10);

            FOR L_REC IN (SELECT * FROM LOGS WHERE LOGS.CREATED_AT > TS ORDER BY CREATED_AT)
                LOOP
                    L_CLOB := L_CLOB ||
                              '<tr> ' ||
                              '<td>' || L_REC.OPERATION || '</td> ' ||
                              '<td>' || L_REC.TABLE_NAME || '</td>' ||
                              '<td>' || L_REC.CREATED_AT || '</td>' ||
                              '<td>' || OBJ_TO_STRING(L_REC.OLD, L_REC.TABLE_NAME) || '</td>' ||
                              '<td>' || OBJ_TO_STRING(L_REC.NEW, L_REC.TABLE_NAME) || '</td>' ||
                              '</tr>' || CHR(10);
                END LOOP;

            L_CLOB := L_CLOB || '</table></body></html>';
        END IF;

        DBMS_OUTPUT.PUT_LINE(L_CLOB);

        FILE_ID := UTL_FILE.FOPEN('LAB_DIR', 'report.html', 'W');
        UTL_FILE.PUT_LINE(FILE_ID, L_CLOB);
        UTL_FILE.FCLOSE(FILE_ID);
        LAST_REPORT_DATE := SYSTIMESTAMP;
    END;
END;

INSERT INTO STORE(TITLE)
VALUES ('hippo');
INSERT INTO WORKER(NAME, BIRTHDATE)
VALUES ('alex', SYSTIMESTAMP);
INSERT INTO PRODUCT(PRICE, STORE_ID)
VALUES (100, (SELECT ID FROM STORE WHERE TITLE = 'hippo'));
INSERT INTO PRODUCT(PRICE, STORE_ID)
VALUES (200, (SELECT ID FROM STORE WHERE TITLE = 'hippo'));
UPDATE PRODUCT
SET PRICE = PRICE * 2;
UPDATE WORKER
SET BIRTHDATE=SYSTIMESTAMP
WHERE NAME = 'alex';
DELETE
FROM STORE
WHERE TITLE = 'hippo';
CALL REPORTS.GET_REPORT();

INSERT INTO STORE(TITLE) VALUES ('santa');

CALL INFO.RESTORE(INTERVAL '0' SECOND);
