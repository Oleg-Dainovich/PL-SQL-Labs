-- TASK 4

CREATE TABLE STUDENTS_LOG (
	ID NUMBER PRIMARY KEY,
	LOG_DATE TIMESTAMP,
	OPERATION VARCHAR2(10),
	STUDENT_ID NUMBER,
	OLD_NAME VARCHAR2(100),
	NEW_NAME VARCHAR2(100),
	OLD_GROUP_ID NUMBER,
	NEW_GROUP_ID NUMBER
);

CREATE SEQUENCE students_log_id_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER trg_students_log_id_seq
BEFORE INSERT ON STUDENTS_LOG
FOR EACH ROW
BEGIN 
	IF :NEW.ID IS NULL THEN 
		SELECT students_log_id_seq.NEXTVAL INTO :NEW.ID
		FROM dual;
	END IF;
END;

CREATE OR REPLACE TRIGGER trg_students_log
AFTER INSERT OR UPDATE OR DELETE ON STUDENTS
FOR EACH ROW 
BEGIN
	IF INSERTING THEN
		INSERT INTO STUDENTS_LOG (LOG_DATE, OPERATION, STUDENT_ID, NEW_NAME, NEW_GROUP_ID)
		VALUES (SYSTIMESTAMP, 'INSERT', :NEW.ID, :NEW.NAME, :NEW.GROUP_ID);
	ELSIF UPDATING THEN
		INSERT INTO STUDENTS_LOG (LOG_DATE, OPERATION, STUDENT_ID, OLD_NAME, NEW_NAME, OLD_GROUP_ID, NEW_GROUP_ID)
		VALUES (SYSTIMESTAMP, 'UPDATE', :OLD.ID, :OLD.NAME, :NEW.NAME, :OLD.GROUP_ID, :NEW.GROUP_ID);
	ELSIF DELETING THEN
		INSERT INTO STUDENTS_LOG (LOG_DATE, OPERATION, STUDENT_ID, OLD_NAME, OLD_GROUP_ID)
		VALUES (SYSTIMESTAMP, 'DELETE', :OLD.ID, :OLD.NAME, :OLD.GROUP_ID);
	END IF;
END;

SELECT * FROM GROUPS 
SELECT * FROM STUDENTS 
SELECT * FROM STUDENTS_LOG
INSERT INTO STUDENTS (NAME, GROUP_ID) VALUES ('test', 0)
DELETE FROM STUDENTS WHERE ID = 3
UPDATE STUDENTS SET ID = 5 WHERE ID = 4
