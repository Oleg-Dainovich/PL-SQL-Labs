-- TASK 2
-- UNIQUENESS OF ID

CREATE OR REPLACE TRIGGER trg_check_groups_unique_id
BEFORE INSERT OR UPDATE ON GROUPS
FOR EACH ROW
DECLARE
	id_count NUMBER;
BEGIN
	SELECT COUNT(*) INTO id_count
	FROM GROUPS
	WHERE ID = :NEW.ID;
	
	IF id_count > 0 THEN
		RAISE_APPLICATION_ERROR(-20001, 'Error. This ID already exists.');
	END IF;
END;

--INSERT INTO GROUPS(ID, NAME, C_VAL) VALUES(0, 'test', 0)
--SELECT * FROM GROUPS

CREATE OR REPLACE TRIGGER trg_check_students_unique_id
BEFORE INSERT OR UPDATE ON STUDENTS
FOR EACH ROW
DECLARE
	id_count NUMBER;
BEGIN
	SELECT COUNT(*) INTO id_count
	FROM STUDENTS
	WHERE ID = :NEW.ID;
	
	IF id_count > 0 THEN
		RAISE_APPLICATION_ERROR(-20001, 'Error. This ID already exists.');
	END IF;
END;

--INSERT INTO STUDENTS(ID, NAME, GROUP_ID) VALUES(0, 'test', 0)
--SELECT * FROM STUDENTS

------------------------------
-- AUTOINCREMENT ID

CREATE SEQUENCE student_id_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER trg_student_seq
BEFORE INSERT ON STUDENTS
FOR EACH ROW
BEGIN 
	IF :NEW.ID IS NULL THEN 
		SELECT student_id_seq.NEXTVAL INTO :NEW.ID
		FROM dual;
	END IF;
END;

--INSERT INTO STUDENTS(NAME, GROUP_ID) VALUES('test2', 0)
--SELECT * FROM STUDENTS

CREATE SEQUENCE group_id_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER trg_group_seq
BEFORE INSERT ON GROUPS
FOR EACH ROW
BEGIN 
	IF :NEW.ID IS NULL THEN 
		SELECT group_id_seq.NEXTVAL INTO :NEW.ID
		FROM dual;
	END IF;
END;

--INSERT INTO GROUPS(NAME, C_VAL) VALUES('test1', 0)
--SELECT * FROM GROUPS

------------------------------
-- UNIQUENESS OF GROUP NAME

CREATE OR REPLACE TRIGGER trg_check_unique_group_name
BEFORE INSERT OR UPDATE ON GROUPS
FOR EACH ROW
DECLARE
	name_count NUMBER;
BEGIN 
	SELECT COUNT(*) INTO name_count
	FROM GROUPS
	WHERE NAME = :NEW.NAME AND ID != :NEW.ID;
	
	IF name_count > 0 THEN
		RAISE_APPLICATION_ERROR(-20001, 'Error. This group name already exists.');
	END IF;
END;

--INSERT INTO GROUPS(NAME, C_VAL) VALUES('test', 0)

------------------------------
